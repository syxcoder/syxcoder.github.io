<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Eclipse项目打包成exe</title>
    <link href="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/"/>
    <url>/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/</url>
    
    <content type="html"><![CDATA[<h2 id="所需其他工具"><a href="#所需其他工具" class="headerlink" title="所需其他工具"></a>所需其他工具</h2><h3 id="1、exe4j"><a href="#1、exe4j" class="headerlink" title="1、exe4j"></a>1、exe4j</h3><p><a href="https://www.ej-technologies.com/download/exe4j/files">点击下载</a></p><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/exe4j.png" class="" title="exe4j"><h3 id="2、inno-setup"><a href="#2、inno-setup" class="headerlink" title="2、inno setup"></a>2、inno setup</h3><p><a href="https://jrsoftware.org/isdl.php">点击下载</a></p><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/inno.png" class="" title="inno"><hr><h2 id="第一步：导出Eclipse的程序jar包"><a href="#第一步：导出Eclipse的程序jar包" class="headerlink" title="第一步：导出Eclipse的程序jar包"></a>第一步：导出Eclipse的程序jar包</h2><blockquote><p>项目根目录右键，选择导出（Export）</p></blockquote><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/export1.png" class="" title="export"><hr><blockquote><p>选择导出类型为Java下的 JAR file</p></blockquote><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/export2.png" class="" title="export2"><hr><blockquote><p>选择项目下要打包的的资源，然后选择导出位置</p></blockquote><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/export3.png" class="" title="export3"><hr><blockquote><p>最后出现如下警告点击OK就行</p></blockquote><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/export4.png" class="" title="export4"><hr><p>此时，你前面选择导出的文件夹就会生成一个JAR文件。</p><hr><h2 id="第二步：使用exe4j对JAR进行转换exe"><a href="#第二步：使用exe4j对JAR进行转换exe" class="headerlink" title="第二步：使用exe4j对JAR进行转换exe"></a>第二步：使用exe4j对JAR进行转换exe</h2><p>exe4j首次运行需要激活，激活码网上可搜到。</p><p>以下为逐步操作：</p><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/exe1.png" class="" title="exe1"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/exe2.png" class="" title="exe2"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/exe3.png" class="" title="exe3"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/exe4.png" class="" title="exe4"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/exe5.png" class="" title="exe5"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/exe6.png" class="" title="exe6"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/exe7.png" class="" title="exe7"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/exe8.png" class="" title="exe"><hr><p><strong>找到打开你安装java环境的文件夹，jdk文件夹，找到jre文件夹，直接复制一份jre文件夹到你前面选择导出exe的文件夹里面去。</strong></p><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/exe9.png" class="" title="exe"><hr><p><strong>然后一路NEXT，直到finished</strong></p><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/finish.png" class="" title="finish"><h2 id="第三步：使用inno打包整个环境"><a href="#第三步：使用inno打包整个环境" class="headerlink" title="第三步：使用inno打包整个环境"></a>第三步：使用inno打包整个环境</h2><p>打开innosetup，直接在welcome界面选择</p><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/inno1.png" class="" title="inno"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/inno2.png" class="" title="inno"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/inno3.png" class="" title="inno"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/inno4.png" class="" title="inno"><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/inno5.png" class="" title="inno"><hr><p><strong>重点：前面我们复制了一次Java环境文件夹中的jre文件夹，此处要再次添加jre文件夹。但是需要在jre文件夹前再嵌套一层文件夹</strong></p><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/inno6.png" class="" title="inno"><hr><p>然后一路NEXT，直到以下界面：</p><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/inno7.png" class="" title="inno"><hr><p>然后一路NEXT，直到编译完成，至此大功告成</p><hr><img src="/2023/06/15/Eclipse%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90exe/end.jpeg" class="" title="end">]]></content>
    
    
    
    <tags>
      
      <tag>Eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统架构设计师笔记</title>
    <link href="/2022/11/02/%E7%B3%BB%E7%BB%9F%E8%83%BD%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/02/%E7%B3%BB%E7%BB%9F%E8%83%BD%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="系统架构设计师"><a href="#系统架构设计师" class="headerlink" title="系统架构设计师"></a>系统架构设计师</h1><h2 id="一、计算机组成与体系结构"><a href="#一、计算机组成与体系结构" class="headerlink" title="一、计算机组成与体系结构"></a>一、计算机组成与体系结构</h2><h3 id="1-1-计算机系统组成"><a href="#1-1-计算机系统组成" class="headerlink" title="1.1 计算机系统组成"></a>1.1 计算机系统组成</h3><p>计算机是硬件和软件的综合体，可以把他看成按功能划分的多级层次结构。</p><h4 id="1-1-1-计算机硬件的组成"><a href="#1-1-1-计算机硬件的组成" class="headerlink" title="1.1.1 计算机硬件的组成"></a>1.1.1 计算机硬件的组成</h4><img src="/2022/11/02/%E7%B3%BB%E7%BB%9F%E8%83%BD%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%A1%86%E5%9B%BE.png" class="" title="计算机组成框图"><ul><li><p><strong>控制器：</strong>分析和执行指令的部件，统一指挥并控制计算机各部件协调工作的中心部件，所依据的是机器指令。包含程序计数器PC、指令寄存器IR、指令译码器ID和时序部件。</p></li><li><p><strong>运算器：</strong>在控制器的控制下完成各种算术运算和逻辑运算。包含算术逻辑单元ALU、累加寄存器AC(通用寄存器)、数据缓存寄存器DR和状态条件寄存器PSW。</p></li><li><p><strong>主存储器：</strong>又称内存储器、内存、主存。储存现场操作的信息与中间结果，包括机器指令和数据。</p></li><li><p><strong>辅助储存器：</strong>又称外储存器、外存、辅存。储存需要长期保存的各种信息。</p></li><li><p><strong>输入设备：</strong>把人们编好的程序和原始数据送到计算中去，并且将他们转换成计算机内部所能识别和接受的信息方式。如鼠标、键盘、扫描仪等。</p></li><li><p><strong>输出设备：</strong>将计算机的处理结果以人或其他设备所能接受的形式送出计算机。如打印机、显示器等。</p><p><strong>注：</strong>有些设备既可以是输入设备，同时也可以是输出设备。如辅助储存器（外存），自动控制和检测系统中使用的数模转换装置等。</p></li></ul><h4 id="1-1-2-计算机系统结构分类"><a href="#1-1-2-计算机系统结构分类" class="headerlink" title="1.1.2 计算机系统结构分类"></a>1.1.2 计算机系统结构分类</h4><p>计算机的发展经历了<strong>电子管和晶体管时代、集成电路时代</strong>（中小规模、大规模、超大规模、甚大规模、极大规模）</p><p>​（一）<strong>储存程序</strong>：这个概念是由<strong>冯·诺依曼</strong>等人于<strong>1946年6月</strong>首先提出的，可以简要概括为以下几点：</p><blockquote><ol><li>计算机（指硬件）应由运算器、存储器、控制器、输入设备和输出设备五大基本部分组成。</li><li>计算机内部采用二进制来表示指令和数据。</li><li>将编好的程序和原始数据事先存入存储器，然后再启动计算机工作。</li></ol></blockquote><p>​（二）<strong>Flynn分类：</strong>根据指令流、数据流的多倍性特征对计算机系统进行分类，有关定义如下：</p><blockquote><ol><li>指令流：机器执行的指令序列；</li><li>数据流：由指令流调用的数据序列，包括输入数据和中间结果，但不包括输出数据。</li></ol></blockquote><p>​Flynn根据不同的指令流-数据流组织方式，把计算机系统分成以下四类：</p><blockquote><ol><li>单指令流单数据流：SISD，其指令部件每次只对一条指令进行译码，并只对一个操作部件分配数据。</li><li>单指令流多数据流：SIMD，以并行处理机为代表，并行处理机包括多个重复的处理单元，有单一指令部件控制，按照同一指令流的要求为他们分配各自所需的不同数据。</li><li>多指令流单数据流：MISD，具有n个处理单元，按n条不同指令的要求对同一数据流及其中间结果进行不同的处理。一个处理单元的输出又作为另一个处理单元的输入。</li><li>多指令流多数据流：MIMD，能实现作业、任务、指令等各级全面并行的多机系统。如多核处理器。</li></ol></blockquote><h4 id="1-1-3-复杂指令集系统CISC与精简指令集系统RISC"><a href="#1-1-3-复杂指令集系统CISC与精简指令集系统RISC" class="headerlink" title="1.1.3 复杂指令集系统CISC与精简指令集系统RISC"></a>1.1.3 复杂指令集系统CISC与精简指令集系统RISC</h4><p>​（一）复杂指令集系统CISC的特点：</p><blockquote><ol><li>指令数量众多。</li><li>指令使用频率相差悬殊。</li><li>支持很多种寻址方式。</li><li>变长的指令：指令长度不是固定的。</li><li>指令可对主存单元中的数据直接进行处理。</li><li>以微程序控制为主。</li></ol></blockquote><p>​（二）精简指令集系统RISC的特点：</p><blockquote><ol><li>指令数量少。优先选取使用频率高的一些简单指令和一些常用指令，避免使用复杂指令。</li><li>指令的寻址方式少。通常只支持寄存器寻址、立即数寻址和相对寻址方式。</li><li>指令长度固定，指令格式种类少。</li><li>以硬布线逻辑控制为主。</li><li>单周期指令执行，采用流水线技术。</li><li>优化的编译器：RISC的精简指令集使编译工作简单化。</li><li>CPU中的通用寄存器数量多。</li></ol></blockquote><h4 id="1-1-4-总线"><a href="#1-1-4-总线" class="headerlink" title="1.1.4 总线"></a>1.1.4 总线</h4><p>总线是一组能分为多个部件<strong>分时共享</strong>的公共信息传送线路。共享是指是指总线上可以挂接多个部件，各个部件之间相互交换的信息都可以通过这组公共线路传送；分时是指同一时刻只允许有一个部件向总线发送消息。</p><p>按总线相对于CPU或其他芯片的位置可分为内部总线和外部总线两种。</p><p>按总线功能来划分，又可分为地址总线、数据总线、控制总线三类。</p><h3 id="1-2-存储器系统"><a href="#1-2-存储器系统" class="headerlink" title="1.2 存储器系统"></a>1.2 存储器系统</h3><p>存储器是用来存放程序和数据的部件。</p><p>传统的存储器系统一般分为高速缓冲存储器（Cache）、主存、辅存三级。</p><p>主存可由CPU直接访问，存取速度快但容量较小。一般存放当前正在执行的程序和数据。</p><p>辅存在主机外部，储存容量大，但存取速度较慢，CPU不可直接访问，数据和程序在被需要时传送到主存。</p><p>Cache的存取速度比主存更快，但容量更小，用来存放当前最急需处理的程序和数据。</p><p>存储器中数据常用的存取方式有顺序存取、直接存取、随机存取、和相连存取四种：</p><blockquote><ol><li>顺序存取：存储器的数据以及录的形式进行组织。对数据的访问必须按特定的线性顺序进行。如磁带存储器。</li><li>直接存取：与顺序存取相似，直接存取也使用一个共享的读写装置对所有的数据进行访问。但是，每个数据块都拥有唯一的地址标识，读写装置可以直接移动到目的数据块所在位置进行访问。磁盘存储器采用直接存取方式。</li><li>随机存取：存储器的每一个可寻址单元都具有自己唯一的地址和读写装置，系统可以在相同的时间内对任意一个存储单元的数据进行访问，而与先前的访问序列无关，主存储器采用随机存取的方式。</li><li>相连存取：相连存取也是一种随机存取的形式，但是选择某一单元进行读写是取决于其内容而不是其地址。Cache采取相连存取的方式。写入数据时，自动选择一个未用的空单元进行存储；要独处数据时，不是给出其存储单元的地址，而是直接给出该数据或者该数据的一部分内容，CAM对所有存储单元中的数据同时进行比较，并标记符合条件的所有数据以供读取。</li></ol></blockquote><h4 id="1-2-1-主存储器"><a href="#1-2-1-主存储器" class="headerlink" title="1.2.1 主存储器"></a>1.2.1 主存储器</h4><p>主存可分为随机存取存储器RAM和只读存储器ROM：</p><blockquote><ol><li>随机存取存储器：RAM，既可以写入也可以写出，但断电后信息无法保存，因此只能用于暂存数据。RAM又可分为DRAM(动态RAM)和SRAM(静态RAM)两种。DRAM的信息会随时间消失，所以需要定时对其刷新维持信息不丢失；SRAM在不断电的情况下信息能够一直保持而不会丢失。</li><li>只读存储器：ROM，存储器的内容只能随机读出而不能写入。即使断电，写入的内容也不会丢失，一般存放系统程序BIOS。</li></ol></blockquote><h4 id="1-2-2-辅助存储器"><a href="#1-2-2-辅助存储器" class="headerlink" title="1.2.2 辅助存储器"></a>1.2.2 辅助存储器</h4><ul><li><strong>磁带存储器：</strong>是一种顺序存储设备，其特点包括：存取时间较长，但存储容量大，便于携带，价格便宜。</li><li><strong>硬盘存储器：</strong>存储在硬盘中，信息分布呈以下层次：记录面、圆柱面、磁道和扇区。在磁盘上进行读写时，首先需要定位到目标磁道，这个过程称之为寻道，定位到目标磁片后，需要定位到目标扇区，此过程通过旋转盘片完成，故磁盘访问时间为：<strong>磁盘访问时间（存取时间）&#x3D; 寻道时间+旋转延迟时间</strong></li></ul><h4 id="1-2-3-Cache存储器"><a href="#1-2-3-Cache存储器" class="headerlink" title="1.2.3 Cache存储器"></a>1.2.3 Cache存储器</h4><p>Cache的功能是提高CPU数据输入输出的速率。通常在CPU和内存之间设置小容量的Cache。</p><p>Cahce通常采用相连存储器CAM。为保障性能，内存与Cache之间的映射往往采用硬件完成，程序员编程时完全不用考虑Cache。</p><h3 id="1-3-流水线"><a href="#1-3-流水线" class="headerlink" title="1.3 流水线"></a>1.3 流水线</h3><p>把一个任务分解为若干顺序执行的子任务，不同的子任务由不同的执行机构负责，而这些机构可以同时并行工作。在任一时刻，任一任务只占用其中一个执行机构，这样可以实现多个任务的重叠执行，提高工作效率。</p><h4 id="1-3-1-流水线周期"><a href="#1-3-1-流水线周期" class="headerlink" title="1.3.1 流水线周期"></a>1.3.1 流水线周期</h4><p>流水线应用过程中会将需要处理的工作分为N个阶段，最耗时的那一阶段所消耗的时间为流水线周期。</p><blockquote><p>比如使用流水线技术执行100条指令，每条指令取指2ms，分析4ms，执行1ms，则流水线周期为4ms。</p></blockquote><h4 id="1-3-2-计算流水线执行时间"><a href="#1-3-2-计算流水线执行时间" class="headerlink" title="1.3.2 计算流水线执行时间"></a>1.3.2 计算流水线执行时间</h4><p><strong>流水线理论执行时间 &#x3D; 第一条指令的执行时间+（n-1）*流水线周期</strong></p><p>实践执行时间把每个执行阶段的时间都统一为流水线周期。（考试80%是理论公式计算，无正确答案才用此公式）</p><h4 id="1-3-3-流水线的吞吐率"><a href="#1-3-3-流水线的吞吐率" class="headerlink" title="1.3.3 流水线的吞吐率"></a>1.3.3 流水线的吞吐率</h4><p>流水线的吞吐率（TP）是指在单位时间内流水线所完成任务数量或是输出的结果数量。有些文献又称平均吞吐率、实际吞吐率。</p><ul><li>计算<strong>流水线吞吐率</strong>的基本公式如下：</li></ul><p>$$<br>TP &#x3D; \frac{n}{T_k} \quad 其中n为任务数，T_k是处理完成n个任务所用的时间。<br>$$</p><ul><li>计算流水线的最大吞吐率：<br>$$<br>TP_{max} &#x3D; \lim_{n\to\infty} \frac{n}{(k+n-1)\Delta t} &#x3D; \frac{1}{\Delta t}<br>$$</li></ul><h4 id="1-3-4-流水线的加速比"><a href="#1-3-4-流水线的加速比" class="headerlink" title="1.3.4 流水线的加速比"></a>1.3.4 流水线的加速比</h4><p>完成同一批任务，不使用流水线所用的时间与使用流水线所用的时间之比称为流水线的加速比。公式如下：<br>$$<br>S &#x3D; \frac{T_0}{T_k} \quad T_0是不使用流水线，即顺序执行所用的时间 \quad T_k是使用流水线的时间<br>$$<br>如果流水线各个流水段的执行时间都相等（设为Dt），则一条k段流水线完成n个连续任务所需要的时间为（k+n-1）Dt 。如果不使用流水线使用的时间为nkDt。因此各个流水段执行时间均相等的一条k段流水线完成n个连续任务时的实际加速比为：<br>$$<br>S &#x3D; \frac{nk\Delta t}{(k+n-1)\Delta t} &#x3D; \frac{nk}{k+n-1}<br>$$<br>这种情况下的最大加速比为：<br>$$<br>S_{max} &#x3D; \lim_{n \to \infty} \frac{nk}{k+n-1} &#x3D; k<br>$$</p><h2 id="二、操作系统"><a href="#二、操作系统" class="headerlink" title="二、操作系统"></a>二、操作系统</h2><h3 id="2-1-操作系统的类型与结构"><a href="#2-1-操作系统的类型与结构" class="headerlink" title="2.1 操作系统的类型与结构"></a>2.1 操作系统的类型与结构</h3><p>计算机系统由硬件和软件两部分组成，操作系统是计算机系统中最基本的系统软件，它既管理计算机系统的软、硬件资源，又控制程序的执行。操作系统的基本类型有：批处理操作系统、分时操作系统和实时操作系统。从资源管理的角度看，操作系统主要是对处理器、存储器、文件、设备和作业进行管理。</p><h4 id="2-1-1-操作系统的定义"><a href="#2-1-1-操作系统的定义" class="headerlink" title="2.1.1 操作系统的定义"></a>2.1.1 操作系统的定义</h4><p>操作系统OS是计算机系统中的核心系统软件，负责管理和控制计算机系统中的硬件和软件资源，合理的组织计算机工作流程和有效的利用资源，在计算机与用户之间起接口的作用。</p><h4 id="2-1-2-操作系统的分类"><a href="#2-1-2-操作系统的分类" class="headerlink" title="2.1.2 操作系统的分类"></a>2.1.2 操作系统的分类</h4><p>按照操作系统的功能划分，操作系统的基本类型有批处理操作系统、分时操作系统、实时操作系统、网络操作系统、分布式操作系统、嵌入式操作系统、微内核操作系统等。</p><h3 id="2-2-操作系统的基本原理"><a href="#2-2-操作系统的基本原理" class="headerlink" title="2.2 操作系统的基本原理"></a>2.2 操作系统的基本原理</h3><p>操作系统的主要功能是进行处理机与进程管理、存储管理、设备管理、文件管理和作业管理的工作。</p><h4 id="2-2-1-进程管理"><a href="#2-2-1-进程管理" class="headerlink" title="2.2.1 进程管理"></a>2.2.1 进程管理</h4><p>为了动态地看待操作系统，则以进程作为独立运行的基本单位，以进程作为分配资源的基本单位，从进程的角度来研究操作系统。处理机管理也被称为进程管理。其功能就是组织和协调用户对处理机的争夺使用，把处理机分配给进程，对进程进行管理和控制。</p><ul><li><p><strong>进程的状态转换</strong></p><blockquote><p>由进程运行的间断性，决定了进程至少具有以下三种状态：</p><ol><li><strong>就绪状态：</strong>当进程 已分配了除CPU以外的所有必要的资源后，只能能再获得处理机，便能立即执行，这时进程的状态称为就绪状态。在一个系统中可以有多个进程同时处于就绪状态，通常把他们排成一个队列，称为就绪队列。</li><li><strong>执行状态：</strong>指进程已获得处理机，其程序正在执行。在单处理机系统中，只能有一个进程处于执行状态。</li><li><strong>阻塞状态：</strong>有时也被称为等待状态或睡眠状态，指进程因为某事件（如请求I&#x2F;O，申请缓冲空间等）而暂停执行时的状态。</li></ol></blockquote><p>进程的状态随着自身的推进和外界的变化而变化。但是阻塞状态的进程不能直接进入执行状态、就绪状态的进程不能直接进入阻塞状态。<strong>在任何时刻，任何进程都处于且只能处于这其中一种状态。</strong></p><p>进程状态变化如下：</p><blockquote><ol><li><strong>运行态→等待态：</strong>进程运行过程中启用了外围设备，等待外围设备传输信息；运行中申请资源；运行中出现了故障。</li><li><strong>等待态→就绪态：</strong>任何一个结束等待的进程必须先变成就绪状态，待分配到处理器后才能运行。</li><li><strong>运行态→就绪态：</strong>由于自身或外界原因为等待状态的进程让出处理器时，它就变成就绪状态。</li><li><strong>就绪态→运行态：</strong>等待分配处理器的进程，系统按一种选定的策略在其中选择一个，让它占用处理器，被选中的进程就变成了运行态。</li></ol></blockquote><p>下图是进程三态转换图：</p><img src="/2022/11/02/%E7%B3%BB%E7%BB%9F%E8%83%BD%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%AC%94%E8%AE%B0/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png" class="" title="进程状态转换"></li><li><p><strong>关于挂起状态</strong></p><p>在不少系统中进程只有上述三种状态，但在另一些系统中又增加了一些新状态，其中最重要的就是挂起状态。引入挂起状态的原因有：</p><blockquote><ol><li>对换的需要。为了缓和内存紧张的情况，而将内存中处于阻塞状态的进程换至外存上，使进程又处于一种有别于阻塞状态的新状态。因为即使该进程所期待的事件发生，该进程仍不具备执行条件而不能进入就绪队列，这种状态称为挂起状态。</li><li>终端用户的请求。终端用户在自己程序运行期间发现有可疑问题时，往往希望使自己的进程暂停下来，如果是就绪状态的话，它不接受调度，不便研究其执行情况或对程序进行修改。所以这种静止状态称为挂起状态。</li><li>父进程请求。父进程希望挂起自己的子进程，以便考察和修改子进程，或者协调各子进程之间的活动。</li><li>负荷调节的需要。当实时工作系统中的工作负荷较重，有可能影响到对实时任务的控制时，可由系统将一些不重要的进程挂起，以保证系统的正常运行。</li><li>操作系统的需要。操作系统希望挂起某些进程，以便检查运行中资源的使用情况及进行记账。</li></ol></blockquote><p>下图是具有挂起操作的进程状态演变：</p><img src="/2022/11/02/%E7%B3%BB%E7%BB%9F%E8%83%BD%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%AC%94%E8%AE%B0/%E5%85%B7%E6%9C%89%E6%8C%82%E8%B5%B7%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png" class="" title="具有挂起的进程状态转换"></li><li><p><strong>关于进程互斥与同步</strong></p><blockquote><ol><li><strong>进程互斥：</strong> 一组并发进程中一个或多个程序段，因共享某一共有资源而导致必须以一个不允许交叉执行的单位执行。也就是说互斥是要保证临界资源在某一时刻只被一个进程访问。</li><li><strong>进程同步：</strong></li></ol></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>系统架构师</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统架构师</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLOv5学习(二)|安装LabelImg</title>
    <link href="/2022/10/27/YOLOv5%E5%AD%A6%E4%B9%A0-2/"/>
    <url>/2022/10/27/YOLOv5%E5%AD%A6%E4%B9%A0-2/</url>
    
    <content type="html"><![CDATA[<h2 id="一、LabelImg是什么"><a href="#一、LabelImg是什么" class="headerlink" title="一、LabelImg是什么"></a>一、LabelImg是什么</h2><p>LabelImg是一个可视化的图像标定工具。我们在制作Faster R-CNN，YOLO，SSD等目标检测的数据集时，均须借此工具标定图像中的目标。它是用<a href="https://www.elecfans.com/tags/python/">Python</a>编写的，并将Qt用于其图形界面。批注以PASCAL VOC格式（ImageNet使用的格式）另存为XML文件。此外，它还支持YOLO格式。</p><h2 id="二、LabelImg安装"><a href="#二、LabelImg安装" class="headerlink" title="二、LabelImg安装"></a>二、LabelImg安装</h2><p><a href="https://github.com/heartexlabs/labelImg">【这里是LabelImg开源库】</a></p><h3 id="MacOS（M1-ARM64架构）"><a href="#MacOS（M1-ARM64架构）" class="headerlink" title="MacOS（M1 ARM64架构）"></a>MacOS（M1 ARM64架构）</h3><p>由于LabelImg是基于PyQt写的，但是PyQt5还没有适配arm架构，所以不能用下面几种正常的方法安装。Homebrew可以安装PyQt5，但是执行labelImg.py的时候还是报错。查阅大量资料后有了下面这种解决办法。</p><p>首先在应用程序中复制一个终端并重命名。然后右键-&gt;显示简介-&gt;勾选通过Rosetta打开：</p><img src="/2022/10/27/YOLOv5%E5%AD%A6%E4%B9%A0-2/zd.png" class="" title="zd"><hr><p>打开终端输入arch，如果返回i386则证明是x86环境下了。</p><img src="/2022/10/27/YOLOv5%E5%AD%A6%E4%B9%A0-2/test_x86.png" class="" title="test_x86"><h3 id="Ubuntu-Linux下安装"><a href="#Ubuntu-Linux下安装" class="headerlink" title="Ubuntu Linux下安装"></a>Ubuntu Linux下安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install pyqt5-dev-tools<br>sudo pip3 install -r requirements/requirements-linux-python3.txt<br>make qt5py3<br>python3 labelImg.py<br>python3 labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]<br></code></pre></td></tr></table></figure><h3 id="MacOS（非arm架构）"><a href="#MacOS（非arm架构）" class="headerlink" title="MacOS（非arm架构）"></a>MacOS（非arm架构）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install qt  # Install qt-5.x.x by Homebrew<br>brew install libxml2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">or using pip</span><br><br>pip3 install pyqt5 lxml # Install qt and lxml by pip<br><br>make qt5py3<br>python3 labelImg.py<br>python3 labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]<br></code></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>Install <a href="https://www.python.org/downloads/windows/">Python</a>, <a href="https://www.riverbankcomputing.com/software/pyqt/download5">PyQt5</a> and <a href="http://lxml.de/installation.html">install lxml</a>.</p><p>Open cmd and go to the <a href="https://github.com/heartexlabs/labelImg#labelimg">labelImg</a> directory</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">pyrcc4 -o libs/resources.py resources.qrc<br>For pyqt5, pyrcc5 -o libs/resources.py resources.qrc<br><br>python labelImg.py<br>python labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]<br></code></pre></td></tr></table></figure><p>If you want to package it into a separate EXE file</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Install pyinstaller and execute:<br><br>pip install pyinstaller<br>pyinstaller --hidden-import=pyqt5 --hidden-import=lxml -F -n &quot;labelImg&quot; -c labelImg.py -p ./libs -p ./<br></code></pre></td></tr></table></figure><h3 id="Windows-Anaconda"><a href="#Windows-Anaconda" class="headerlink" title="Windows+Anaconda"></a>Windows+Anaconda</h3><p>Download and install <a href="https://www.anaconda.com/download/#download">Anaconda</a> (Python 3+)</p><p>Open the Anaconda Prompt and go to the <a href="https://github.com/heartexlabs/labelImg#labelimg">labelImg</a> directory</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install pyqt=5<br>conda install -c anaconda lxml<br>pyrcc5 -o libs/resources.py resources.qrc<br>python labelImg.py<br>python labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]<br></code></pre></td></tr></table></figure><img src="/2022/10/27/YOLOv5%E5%AD%A6%E4%B9%A0-2/yolov5_2.png" class="" title="yolov5_2">]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>YOLOv5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLOv5</tag>
      
      <tag>python</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLOv5学习(一)｜部署YOLOv5模型</title>
    <link href="/2022/10/26/YOLOv5%E5%AD%A6%E4%B9%A0-1/"/>
    <url>/2022/10/26/YOLOv5%E5%AD%A6%E4%B9%A0-1/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>YOLO系列应该是目前最热门的目标检测算法了，目前最新版本更新到了YOLOv5。由于YOLOv5太新了，目前TensorFlow2还没稳定，那就用PyTorch框架吧。PyTorch与TensorFlow的区别如下：</p><blockquote><ul><li><strong>TensorFlow：</strong>更倾向于工程人员，落地比较好。</li><li><strong>PyTorch：</strong>比较倾向于研究人员，前沿算法用的比较多。</li></ul></blockquote><p>另外，我用的是Macbook M1Pro，PyTorch已经支持M1芯片加速。</p><p>YOLOv5又分为Yolov5s,Yolov5m,Yolov5i,Yolov5x四个版本，此处以Yolov5s为例。</p><h1 id="二、下载源码并配置环境"><a href="#二、下载源码并配置环境" class="headerlink" title="二、下载源码并配置环境"></a>二、下载源码并配置环境</h1><h2 id="2-1-下载源码"><a href="#2-1-下载源码" class="headerlink" title="2.1 下载源码"></a>2.1 下载源码</h2><p><a href="https://github.com/ultralytics/yolov5">【YOLOv5开源地址】</a></p><img src="/2022/10/26/YOLOv5%E5%AD%A6%E4%B9%A0-1/yolov5_download.png" class="" title="yolov5_download"><p>将源码git到本地</p><h2 id="2-2-安装需要的环境"><a href="#2-2-安装需要的环境" class="headerlink" title="2.2 安装需要的环境"></a>2.2 安装需要的环境</h2><h3 id="2-2-1-安装PyTorch环境"><a href="#2-2-1-安装PyTorch环境" class="headerlink" title="2.2.1 安装PyTorch环境"></a>2.2.1 安装PyTorch环境</h3><p><a href="https://pytorch.org/">【PyTorch官网】</a></p><p>如果是MBP M1芯片的话，务必要选择Preview版，如图</p><img src="/2022/10/26/YOLOv5%E5%AD%A6%E4%B9%A0-1/pytorch.png" class="" title="pytorch"><p>将Command粘贴到终端中执行。</p><p>安装完成后进入python进行测试，</p><blockquote><ul><li>torch.__version__查看版本。</li><li>torch.device(“mps”)是否支持M1Mac的mps加速。</li><li>当然也可以简单调用一下torch的函数进行测试。</li></ul></blockquote><p>如图：</p><img src="/2022/10/26/YOLOv5%E5%AD%A6%E4%B9%A0-1/torch_test.png" class="" title="torch"><h3 id="2-2-2-安装其他项目依赖包"><a href="#2-2-2-安装其他项目依赖包" class="headerlink" title="2.2.2 安装其他项目依赖包"></a>2.2.2 安装其他项目依赖包</h3><p>可以查看项目根目录下的requirements.txt逐个进行安装，当然也可以直接使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install -r requirements.txt -i https://pypi.mirrors.ustc.edu.cn/simple/<br></code></pre></td></tr></table></figure><p>其中，<code>-i https://pypi.mirrors.ustc.edu.cn/simple/</code>为中科大镜像，可以加快package的下载速度。</p><h1 id="三、运行代码"><a href="#三、运行代码" class="headerlink" title="三、运行代码"></a>三、运行代码</h1><p>打开终端进入yolov5根目录下，输入命令</p><p><code>python detect.py --weights yolov5s.pt --img 640 --conf 0.25 --source data/images</code></p><p>使用mps的话输入以下命令</p><p><code>PYTORCH_ENABLE_MPS_FALLBACK=1 python3 detect.py --weights yolov5s.pt --img 640 --conf 0.25 --source data/images --device mps</code></p><img src="/2022/10/26/YOLOv5%E5%AD%A6%E4%B9%A0-1/run.png" class="" title="run"><hr><p><strong>成功运行后结果会保存在runs&#x2F;detect&#x2F;exp目录下。</strong></p><img src="/2022/10/26/YOLOv5%E5%AD%A6%E4%B9%A0-1/res.png" class="" title="res"><hr><p><strong>至此，YOLOv5的基本部署就完成了！</strong></p><img src="/2022/10/26/YOLOv5%E5%AD%A6%E4%B9%A0-1/yolov5_1.png" class="" title="yolov5_1">]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>YOLOv5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLOv5</tag>
      
      <tag>python</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Colab部署NovelAI项目</title>
    <link href="/2022/10/25/%E5%9F%BA%E4%BA%8EColab%E9%83%A8%E7%BD%B2NovelAI%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/10/25/%E5%9F%BA%E4%BA%8EColab%E9%83%A8%E7%BD%B2NovelAI%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Colab介绍"><a href="#一、Colab介绍" class="headerlink" title="一、Colab介绍"></a>一、Colab介绍</h1><p>​在机器学习过程中我们可能需要cuda来使用GPU加速训练网络，但是cuda目前只支持N卡，像我的MBP或者其他显卡又该怎么办呢？</p><h2 id="Colab是什么？"><a href="#Colab是什么？" class="headerlink" title="Colab是什么？"></a>Colab是什么？</h2><p>​Colab &#x3D; Colaboratory（合作实验室），它是谷歌提供的一个在线工作平台，用户可以直接通过浏览器执行python代码并于他人合作分享。当然最主要的是，他还为我们提供免费的GPU。熟悉深度学习的伙伴应该知道，CPU计算力高但是核数量少，善于处理线性序列，而GPU计算力低但核数量多，更善于处理并行计算。因此在深度学习中使用GPU计算的速度要远快于CPU，因此有高算力的GPU是深度学习的重要保证。因此Colab最大的优势在于我们可以免费的借用谷歌提供的GPU来进行深度学习。国内也有类似的平台，例如百度的飞浆，但是免费使用时长及性能不及Colab。</p><h2 id="Colab相关的概念"><a href="#Colab相关的概念" class="headerlink" title="Colab相关的概念"></a>Colab相关的概念</h2><p><strong>Jupyter Notebook：</strong> 在Colab中，python代码的执行是基于.ipynb文件，也就是Jupyter Notebook文件格式 的python文件。这种笔记本风格的文件与普通的py文件的区别是它可以分块执行代码并立刻得到代码块的输出（有点像命令行中的python，但是前者可以写一个代码块而命令行是单行执行），同时它还可以很方便的添加注释，这种交互式 的操作十分适合一些轻量级的任务。<a href="https://jupyter.org/">具体关于Jupyter NoteBook的信息可以点此访问官网。</a></p><p><strong>代码执行程序：</strong>代码执行程序就是Colab在云端的服务器。简单来说，我们现在Notebook写好代码，然后连接到代码执行程序，Colab会在云端执行代码，然后把结果回传给浏览器。</p><p><strong>实例空间：</strong>连接到代码执行程序后，Colab需要为其分配实例空间(Instance)，可以简单理解为为了运行Notebook而创建的“虚拟机”，其中包含了执行ipynb文件时的默认配置、环境变量、自带的库等。</p><p><strong>会话：</strong>当Jupyter Notebook连接到代码执行程序并分配实例空间后，就成为了一个会话(Session)，但是用户能开启的会话是有限的。</p><p>支持通过“**!&lt;command&gt;**”的方式来执行UNIX终端命令，比如“!ls”, “!pip install &lt;package&gt;“等。</p><hr><img src="/2022/10/25/%E5%9F%BA%E4%BA%8EColab%E9%83%A8%E7%BD%B2NovelAI%E9%A1%B9%E7%9B%AE/colab2.jpg" class="" title="colab2"><hr><h1 id="二、部署NovelAI项目"><a href="#二、部署NovelAI项目" class="headerlink" title="二、部署NovelAI项目"></a>二、部署NovelAI项目</h1><h2 id="1、配置环境"><a href="#1、配置环境" class="headerlink" title="1、配置环境"></a>1、配置环境</h2><h3 id="1-1-测试显卡"><a href="#1-1-测试显卡" class="headerlink" title="1.1 测试显卡"></a>1.1 测试显卡</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">!nvidia-smi -L<br></code></pre></td></tr></table></figure><h3 id="1-2-Setup-miniconda"><a href="#1-2-Setup-miniconda" class="headerlink" title="1.2 Setup miniconda"></a>1.2 Setup miniconda</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>!wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<br>!chmod +x Miniconda3-latest-Linux-x86_64.sh<br>!bash ./Miniconda3-latest-Linux-x86_64.sh -b -f -p /usr/local<br>sys.path.append(<span class="hljs-string">&#x27;/usr/local/lib/python3.7/site-packages/&#x27;</span>)<br>!rm Miniconda3-latest-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><h3 id="1-3-Setup-environment"><a href="#1-3-Setup-environment" class="headerlink" title="1.3 Setup environment"></a>1.3 Setup environment</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">!conda env update -n base -f /content/stable-diffusion/environment.yaml <br></code></pre></td></tr></table></figure><h3 id="1-4-Setup-Upscalers-CFPGAN-and-ESRGAN"><a href="#1-4-Setup-Upscalers-CFPGAN-and-ESRGAN" class="headerlink" title="1.4 Setup Upscalers - CFPGAN and ESRGAN"></a>1.4 Setup Upscalers - CFPGAN and ESRGAN</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">add_CFP = <span class="hljs-literal">True</span> <span class="hljs-comment">#@param &#123;type:&quot;boolean&quot;&#125; </span><br>add_ESR = <span class="hljs-literal">True</span> <span class="hljs-comment">#@param &#123;type:&quot;boolean&quot;&#125;</span><br>add_LDSR = <span class="hljs-literal">False</span> <span class="hljs-comment">#@param &#123;type:&quot;boolean&quot;&#125; </span><br><span class="hljs-comment">#@markdown ⚠️ LDSR is 1.9GB and make take time to download</span><br><br><span class="hljs-keyword">if</span> add_CFP:<br>  %cd /content/stable-diffusion/src/gfpgan/<br>  !pip install basicsr facexlib yapf lmdb opencv-python pyyaml tb-nightly --no-deps<br>  !python setup.py develop<br>  !pip install realesrgan<br>  !wget https://github.com/TencentARC/GFPGAN/releases/download/v1<span class="hljs-number">.3</span><span class="hljs-number">.0</span>/GFPGANv1<span class="hljs-number">.3</span>.pth -P experiments/pretrained_models<br><span class="hljs-keyword">if</span> add_ESR:<br>  %cd /content/stable-diffusion/src/realesrgan/<br>  !wget https://github.com/xinntao/Real-ESRGAN/releases/download/v0<span class="hljs-number">.1</span><span class="hljs-number">.0</span>/RealESRGAN_x4plus.pth -P experiments/pretrained_models<br>  !wget https://github.com/xinntao/Real-ESRGAN/releases/download/v0<span class="hljs-number">.2</span><span class="hljs-number">.2</span><span class="hljs-number">.4</span>/RealESRGAN_x4plus_anime_6B.pth -P experiments/pretrained_models<br><span class="hljs-keyword">if</span> add_LDSR:<br>  %cd /content/stable-diffusion/src<br>  !git clone https://github.com/devilismyfriend/latent-diffusion<br>  %cd latent-diffusion<br>  %mkdir -p experiments/<br>  %cd experiments/<br>  %mkdir -p pretrained_models<br>  %cd pretrained_models<br>  <span class="hljs-comment">#project.yaml download</span><br>  !wget -O project.yaml https://heibox.uni-heidelberg.de/f/31a76b13ea27482981b4/?dl=<span class="hljs-number">1</span><br>  <span class="hljs-comment">#model.ckpt model download</span><br>  !wget -O model.ckpt https://heibox.uni-heidelberg.de/f/578df07c8fc04ffbadf3/?dl=<span class="hljs-number">1</span><br><br>%cd /content/stable-diffusion/<br>!wget https://github.com/matomo-org/travis-scripts/blob/master/fonts/Arial.ttf?raw=true -O arial.ttf<br></code></pre></td></tr></table></figure><h2 id="2、配置NovelAI"><a href="#2、配置NovelAI" class="headerlink" title="2、配置NovelAI"></a>2、配置NovelAI</h2><h3 id="2-1-下载复制文件"><a href="#2-1-下载复制文件" class="headerlink" title="2.1 下载复制文件"></a>2.1 下载复制文件</h3><p>是在github上clone下来的项目，最快也要三五分钟，耐心等待。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">!sudo apt-get install aria2<br>!sudo apt-get install file<br><br>!mkdir /content/time<br>!git clone https://github.com/pnpnpn/timeout-decorator.git /content/time<br>%cd /content/time<br>!pwd<br>!ls -l<br></code></pre></td></tr></table></figure><p>下载NA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">%cd /content/time<br><br><span class="hljs-keyword">import</span> timeout_decorator<br><br><span class="hljs-meta">@timeout_decorator.timeout(<span class="hljs-params"><span class="hljs-number">180</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">downNovelAI</span>():<br>  !rm -rf /content/n2<br>  !mkdir /content/n2<br>  %cd /content/n2<br>  !aria2c <span class="hljs-string">&quot;magnet:?xt=urn:btih:4a4b483d4a5840b6e1fee6b0ca1582c979434e4d&amp;dn=naifu&amp;tr=udp%3a%2f%2ftracker.opentrackr.org%3a1337%2fannounce&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkFile</span>():<br>  !file /content/n2/naifu/models/animefull-final-pruned/model.ckpt&gt;fileinfo<br>  !file /content/n2/naifu/models/animevae.pt&gt;fileinfo2<br>  f1=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;fileinfo&quot;</span>)<br>  res1=f1.read()<br>  f1.close<br>  f2=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;fileinfo2&quot;</span>)<br>  res2=f2.read()<br>  f2.close<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Zip&quot;</span> <span class="hljs-keyword">in</span> res1 <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;Zip&quot;</span> <span class="hljs-keyword">in</span> res2<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>  <span class="hljs-keyword">try</span>:<br>    downNovelAI()<br>  <span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">if</span> checkFile():<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载完成&quot;</span>)<br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载未完成，重试&quot;</span>)<br></code></pre></td></tr></table></figure><p>下载WebUI</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">!mkdir /content/novelai<br>%cd /content/novelai<br>!git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui /content/novelai<br>%cd /content/novelai<br>!git checkout -b master<br></code></pre></td></tr></table></figure><p>复制训练好的模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">!cp /content/n2/naifu/models/animefull-final-pruned/model.ckpt /content/novelai/models/Stable-diffusion/<br>!cp /content/n2/naifu/models/animevae.pt /content/novelai/models/Stable-diffusion/model.pt<br><br>!mkdir -p /content/novelai/train_images/raw/<br>!mkdir -p /content/novelai/train_images/des/<br></code></pre></td></tr></table></figure><h3 id="2-2-设置登录账号密码"><a href="#2-2-设置登录账号密码" class="headerlink" title="2.2 设置登录账号密码"></a>2.2 设置登录账号密码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@markdown # 用户名</span><br>user = <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-comment">#@param&#123;type:&quot;string&quot;&#125;</span><br><span class="hljs-comment">#@markdown # 密码</span><br>pwd = <span class="hljs-string">&quot;123456&quot;</span> <span class="hljs-comment">#@param&#123;type:&quot;string&quot;&#125;</span><br></code></pre></td></tr></table></figure><hr><h1 id="三、启动！"><a href="#三、启动！" class="headerlink" title="三、启动！"></a>三、启动！</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;用户名=<span class="hljs-subst">&#123;user&#125;</span>, 密码=<span class="hljs-subst">&#123;pwd&#125;</span>&quot;</span>)<br>!python launch.py --share --gradio-auth &#123;user&#125;:&#123;pwd&#125;<br></code></pre></td></tr></table></figure><img src="/2022/10/25/%E5%9F%BA%E4%BA%8EColab%E9%83%A8%E7%BD%B2NovelAI%E9%A1%B9%E7%9B%AE/colab.jpg" class="" title="colab">]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>机器学习</tag>
      
      <tag>colab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>八月随笔</title>
    <link href="/2022/08/21/%E5%85%AB%E6%9C%88%E9%9A%8F%E7%AC%94/"/>
    <url>/2022/08/21/%E5%85%AB%E6%9C%88%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<img src="/2022/08/21/%E5%85%AB%E6%9C%88%E9%9A%8F%E7%AC%94/sb.jpg" class="" title="informal_essay"><h2 id="校验算法-CRC16"><a href="#校验算法-CRC16" class="headerlink" title="校验算法- CRC16"></a>校验算法- CRC16</h2><h3 id="常见标准"><a href="#常见标准" class="headerlink" title="常见标准"></a>常见标准</h3><blockquote><p> CRC16_CCITT：多项式x16+x12+x5+1（0x1021），初始值0x0000，低位在前，高位在后，结果与0x0000异或<br>CRC16_CCITT_FALSE：多项式x16+x12+x5+1（0x1021），初始值0xFFFF，低位在后，高位在前，结果与0x0000异或<br>CRC16_XMODEM：多项式x16+x12+x5+1（0x1021），初始值0x0000，低位在后，高位在前，结果与0x0000异或<br>CRC16_X25：多项式x16+x12+x5+1（0x1021），初始值0xFFFF，低位在前，高位在后，结果与0xFFFF异或<br>CRC16_MODBUS：多项式x16+x15+x2+1（0x8005），初始值0xFFFF，低位在前，高位在后，结果与0x0000异或<br>CRC16_MAXIM：多项式x16+x15+x2+1（0x8005），初始值0x0000，低位在前，高位在后，结果与0xFFFF异或<br>CRC16_USB：多项式x16+x15+x2+1（0x8005），初始值0xFFFF，低位在前，高位在后，结果与0xFFFF异或<br>CRC16_IBM：多项式x16+x15+x2+1（0x8005），初始值0x0000，低位在前，高位在后，结果与0x0000异或</p></blockquote><hr><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><blockquote><p>1.根据CRC16的标准选择初值CRCIn的值。<br>2.将数据的第一个字节与CRCIn高8位异或。<br>3.判断最高位，若该位为 0 左移一位，若为 1 左移一位再与多项式Hex码异或。<br>4.重复3直至8位全部移位计算结束。<br>5.重复将所有输入数据操作完成以上步骤，所得16位数即16位CRC校验码。</p></blockquote><hr><h2 id="关于数据类型"><a href="#关于数据类型" class="headerlink" title="关于数据类型"></a>关于数据类型</h2><blockquote><p>c++内建整型中唯一用到的是int，如果需要不同大小的变量，可以使用&lt;stdint.h&gt;中的精确宽度的整型，如int 6_t。不要使用uint32_t等无符号整数，除非是在表示一个位组(bit pattern)而不是一个人数值。即使数值不会为负值也不要使用无符号类型。</p><p>char有可能是signed，也有可能是unsigned（取决于编译器）</p></blockquote><hr><h2 id="关于C-编码规范"><a href="#关于C-编码规范" class="headerlink" title="关于C++编码规范"></a>关于C++编码规范</h2><blockquote><p>1、所有的头文件都应该使用# define保护，防止被多重包含，格式为<PROJECT><em><PATH></em><FILE><em>H</em><br>    2、使用前置声明尽量减少.h文件中# include的数量，降低编译依赖；能依赖声明的就不要依赖定义。<br>    3、内联函数：当函数不超过10行时，且内部结构不复杂时。对于复杂的内联函数的定义，应该放在-inl.h的头文件中。-inl.h文件还可以用于函数模板的定义（一般用不到）。<br>    4、定义函数时尽量做到输入参数在前，输出参数在后：提高可读性和易维护性。<br>    5、项目内头文件应按照项目源代码目录树结构排列。包含次序：对应的头文件、C系统文件、C++系统文件、其他库头文件、本项目内头文件。<br>    6、允许甚至提倡匿名命名空间，以避免运行时的命名冲突。匿名命名空间的内容无需缩进，空间结束时用注释&#x2F;&#x2F; namespace标识，不能在.h头文件中使用匿名命名空间！<br>    7、最好不要使用using指示符，保证命名空间下的所有名称都可以正常使用，防止污染命名空间。<br>    8、不要将嵌套类定义为public，除非他们是接口的一部分。<br>    非成员函数、静态成员函数和全局函数使用命名空间中的非成员函数或静态成员函数，尽量不要使用全局函数。<br>   9、如果变量是一个 对象，每次进入作用域都要调用其构造函数，每次退出都要调用析构函数，所以这类变量尽量在作用域外声明会更加高效。<br>    10、禁止使用class类型的静态或全局变量。<br>    11、不要使用函数返回值初始化静态变量。<br>    12、不要在多线程代码中使用非 const 的静态变量。<br>    13、构造函数一般进行没什么意义的初始化，有意义的初始化尽量放在Init()函数中。<br>    14、如果类中定义了成员变量而且没有提供其他构造函数，就要自己定义一个默认构造函数。<br>    15、所有单参数构造函数都必须是显式的。在类定义中，将关键字 explicit 加到单参数构造函数前。</p></blockquote><p>未完待续……</p><hr><h2 id="屏蔽SIGPIPE信号"><a href="#屏蔽SIGPIPE信号" class="headerlink" title="屏蔽SIGPIPE信号"></a>屏蔽SIGPIPE信号</h2><blockquote><p>signal(SIGPIPE, SIG_IGN);不要直接通过signal来忽略信号</p><p>可以通过下列方法来屏蔽SIGPIPE信号：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sigaction</span> sa;<br>sa.sa_handler = SIG_IGN;<span class="hljs-comment">//设定接受到指定信号后的动作为忽略</span><br>sa.sa_flags = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">sigemptyset</span>(&amp;sa.sa_mask) == <span class="hljs-number">-1</span> || <span class="hljs-comment">//初始化信号集为空</span><br><span class="hljs-built_in">sigaction</span>(SIGPIPE, &amp;sa, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>) <span class="hljs-comment">//屏蔽SIGPIPE信号</span><br>&#123; <br><span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;failed to ignore SIGPIPE; sigaction&quot;</span>);<br><span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>It&#39;s my new blog</title>
    <link href="/2022/08/19/test/"/>
    <url>/2022/08/19/test/</url>
    
    <content type="html"><![CDATA[<h1 id="开个新博客记录一下工作学习中的东西吧"><a href="#开个新博客记录一下工作学习中的东西吧" class="headerlink" title="开个新博客记录一下工作学习中的东西吧"></a>开个新博客记录一下工作学习中的东西吧</h1><img src="/2022/08/19/test/test.jpeg" class="" title="test">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/15/hello-world/"/>
    <url>/2022/08/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
